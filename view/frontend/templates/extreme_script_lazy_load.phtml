<?php
/**
 * Copyright (c) 2022-2025. All rights reserved.
 * @author: Volodymyr Hryvinskyi <mailto:volodymyr@hryvinskyi.com>
 */

declare(strict_types=1);

/**
 * @var $block \Magento\Framework\View\Element\Template
 * @var $configViewModel \Hryvinskyi\PageSpeedJsExtremeLazyLoadFrontendUi\ViewModel\ConfigViewModel
 * @var $secureRenderer \Magento\Framework\View\Helper\SecureHtmlRenderer
 */

$configViewModel = $block->getData('configViewModel');
$config = $configViewModel->getConfig();

// Prepare timeout configuration
$timeoutConfig = '';
$clearTimeoutConfig = '';
if ($config->isTimeOutEnabled()) {
    $timeoutConfig = sprintf("let timeOut = setTimeout(initScripts, %d);", $config->getTimeOut());
    $clearTimeoutConfig = 'clearTimeout(timeOut);';
}

// Prepare event listeners
$delayEvents = $config->getDelayEvents();
$addEventListeners = '';
$removeEventListeners = '';

foreach ($delayEvents as $event) {
    $addEventListeners .= sprintf("d.addEventListener('%s', initScriptsOnEvent);", $event);
    $removeEventListeners .= sprintf("d.removeEventListener('%s', initScriptsOnEvent);", $event);
}

$scriptContent = <<<JS
(function (w, d) {
    console.info('%cðŸš€ Extreme Lazy Load JavaScript is now active and ready!', 'color: #28a745; font-weight: bold; font-size: 12px;');
    
    // Initialize state flags
    w.lozyScriptsLoaded = false;
    w.lazyScriptsEventsLoaded = false;
    
    function callback() {
        if (w.lozyScriptsLoaded) {
            return;
        }
        
        w.lozyScriptsLoaded = true;
        
        const scripts = d.querySelectorAll('script[type=lazyload]');
        let scriptIndex = 0;
        
        // Set timeout if enabled
        {$timeoutConfig}
        
        // Add event listeners for configured delay events
        {$addEventListeners}
        
        /**
         * Initialize scripts when event is triggered
         */
        function initScriptsOnEvent() {
            // Remove event listeners once triggered
            {$removeEventListeners}
            
            // Clear timeout if it's set
            {$clearTimeoutConfig}
            
            initScripts();
        }
        
        /**
         * Initialize loading of the next script
         */
        function initScripts() {
            if (scripts.length === 0 || scriptIndex >= scripts.length) {
                return;
            }
            
            const script = scripts[scriptIndex];
            
            if (script.hasAttribute('data-lazy-source')) {
                loadExternalJs(script);
            } else {
                loadInlineJs(script);
            }
        }
        
        /**
         * Process next script and trigger events if all scripts are loaded
         */
        function processNextScript() {
            scriptIndex++;
            
            initScripts();
            
            // If all scripts are loaded, trigger events
            if (!w.lazyScriptsEventsLoaded && scriptIndex >= scripts.length) {
                w.lazyScriptsEventsLoaded = true;
                
                w.dispatchEvent(new Event("load"));
                d.dispatchEvent(new Event("DOMContentLoaded"));
                d.dispatchEvent(new Event("LazyScriptsLoaded"));
            }
        }
        
        /**
         * Load external JavaScript file
         * @param {HTMLElement} originalScript
         */
        function loadExternalJs(originalScript) {
            const script = d.createElement('script');
            script.type = 'text/javascript';
            script.src = originalScript.getAttribute('data-lazy-source');
            script.onload = processNextScript;
            script.onerror = processNextScript;
            
            copyAttributes(originalScript, script);
            d.head.appendChild(script);
            originalScript.remove();
        }
        
        /**
         * Load inline JavaScript
         * @param {HTMLElement} originalScript
         */
        function loadInlineJs(originalScript) {
            const script = d.createElement('script');
            script.type = 'text/javascript';
            
            script.innerHTML = originalScript.innerHTML;
            copyAttributes(originalScript, script);
            
            originalScript.parentNode.replaceChild(script, originalScript);
            
            processNextScript();
        }
        
        /**
         * Copy attributes from original script to new script
         * @param {HTMLElement} source
         * @param {HTMLElement} target
         */
        function copyAttributes(source, target) {
            const ignoreAttributes = ['data-lazy-source', 'type', 'nonce', 'innerHTML'];
            
            // Handle nonce for CSP
            const nonce = source.nonce || source.getAttribute("nonce");
            if (nonce) {
                target.setAttribute('nonce', nonce);
                target.nonce = nonce;
            }
            
            Array.from(source.attributes).forEach(attr => {
                if (!ignoreAttributes.includes(attr.nodeName)) {
                    target.setAttribute(attr.nodeName, attr.nodeValue);
                }
            });
        }
        
        // Handle localStorage caching for returning visitors
        if (localStorage) {
            if (localStorage.getItem('extremeLazyLoad') === 'true') {
                setTimeout(() => {
                    d.dispatchEvent(new Event("ExtremeLazyLoad"));
                }, 1000);
            } else {
                d.addEventListener('LazyScriptsLoaded', () => {
                    localStorage.setItem('extremeLazyLoad', 'true');
                });
            }
        }
    }
    
    // Execute callback when DOM is ready
    if (d.readyState !== 'loading') {
        callback();
    } else {
        d.addEventListener('DOMContentLoaded', callback);
    }
})(window, document);
JS;

echo $secureRenderer->renderTag(
    'script',
    [
        'data-ignore-extreme-lazy-load' => null,
        'data-pagespeed-ignore-merge' => null,
    ],
    $scriptContent,
    false
);
